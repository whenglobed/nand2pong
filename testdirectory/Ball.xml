<class>
  <keyword> class </keyword>
  <identifier> Ball </identifier>
    NAME: Ball, TYPE: none, KIND: none, INDEX: NA
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> x </identifier>
      NAME: x, TYPE: int, KIND: field, FIELDINDEX: 0
    <symbol> , </symbol>
    <identifier> y </identifier>
      NAME: y, TYPE: int, KIND: field, FIELDINDEX: 1
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> lengthx </identifier>
      NAME: lengthx, TYPE: int, KIND: field, FIELDINDEX: 2
    <symbol> , </symbol>
    <identifier> lengthy </identifier>
      NAME: lengthy, TYPE: int, KIND: field, FIELDINDEX: 3
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> d </identifier>
      NAME: d, TYPE: int, KIND: field, FIELDINDEX: 4
    <symbol> , </symbol>
    <identifier> straightD </identifier>
      NAME: straightD, TYPE: int, KIND: field, FIELDINDEX: 5
    <symbol> , </symbol>
    <identifier> diagonalD </identifier>
      NAME: diagonalD, TYPE: int, KIND: field, FIELDINDEX: 6
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier> invert </identifier>
      NAME: invert, TYPE: boolean, KIND: field, FIELDINDEX: 7
    <symbol> , </symbol>
    <identifier> positivex </identifier>
      NAME: positivex, TYPE: boolean, KIND: field, FIELDINDEX: 8
    <symbol> , </symbol>
    <identifier> positivey </identifier>
      NAME: positivey, TYPE: boolean, KIND: field, FIELDINDEX: 9
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> leftWall </identifier>
      NAME: leftWall, TYPE: int, KIND: field, FIELDINDEX: 10
    <symbol> , </symbol>
    <identifier> rightWall </identifier>
      NAME: rightWall, TYPE: int, KIND: field, FIELDINDEX: 11
    <symbol> , </symbol>
    <identifier> topWall </identifier>
      NAME: topWall, TYPE: int, KIND: field, FIELDINDEX: 12
    <symbol> , </symbol>
    <identifier> bottomWall </identifier>
      NAME: bottomWall, TYPE: int, KIND: field, FIELDINDEX: 13
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier> wall </identifier>
      NAME: wall, TYPE: int, KIND: field, FIELDINDEX: 14
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier> Ball </identifier>
      NAME: Ball, TYPE: int, KIND: none, INDEX: NA
    <identifier> new </identifier>
      NAME: new, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> Ax </identifier>
        NAME: Ax, TYPE: int, KIND: argument, ARGINDEX: 0
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> Ay </identifier>
        NAME: Ay, TYPE: int, KIND: argument, ARGINDEX: 1
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> AleftWall </identifier>
        NAME: AleftWall, TYPE: int, KIND: argument, ARGINDEX: 2
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> ArightWall </identifier>
        NAME: ArightWall, TYPE: int, KIND: argument, ARGINDEX: 3
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> AtopWall </identifier>
        NAME: AtopWall, TYPE: int, KIND: argument, ARGINDEX: 4
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> AbottomWall </identifier>
        NAME: AbottomWall, TYPE: int, KIND: argument, ARGINDEX: 5
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> x </identifier>
            NAME: x, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ax </identifier>
                NAME: Ax, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> y </identifier>
            NAME: y, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Ay </identifier>
                NAME: Ay, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> leftWall </identifier>
            NAME: leftWall, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> AleftWall </identifier>
                NAME: AleftWall, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> rightWall </identifier>
            NAME: rightWall, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> ArightWall </identifier>
                NAME: ArightWall, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> - </symbol>
            <term>
              <integerConstant> 6 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> topWall </identifier>
            NAME: topWall, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> AtopWall </identifier>
                NAME: AtopWall, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> bottomWall </identifier>
            NAME: bottomWall, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> AbottomWall </identifier>
                NAME: AbottomWall, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> - </symbol>
            <term>
              <integerConstant> 6 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> wall </identifier>
            NAME: wall, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> show </identifier>
            NAME: show, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> dispose </identifier>
      NAME: dispose, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Memory </identifier>
            NAME: Memory, TYPE: int, KIND: none, INDEX: NA
          <symbol> . </symbol>
          <identifier> deAlloc </identifier>
            NAME: deAlloc, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> show </identifier>
      NAME: show, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
            NAME: Screen, TYPE: int, KIND: none, INDEX: NA
          <symbol> . </symbol>
          <identifier> setColor </identifier>
            NAME: setColor, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> true </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
            NAME: draw, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> hide </identifier>
      NAME: hide, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
            NAME: Screen, TYPE: int, KIND: none, INDEX: NA
          <symbol> . </symbol>
          <identifier> setColor </identifier>
            NAME: setColor, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> false </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> draw </identifier>
            NAME: draw, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> draw </identifier>
      NAME: draw, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> Screen </identifier>
            NAME: Screen, TYPE: int, KIND: none, INDEX: NA
          <symbol> . </symbol>
          <identifier> drawRectangle </identifier>
            NAME: drawRectangle, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> x </identifier>
                  NAME: x, TYPE: int, KIND: none, INDEX: NA
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                  NAME: y, TYPE: int, KIND: none, INDEX: NA
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> x </identifier>
                  NAME: x, TYPE: int, KIND: none, INDEX: NA
              </term>
              <symbol> + </symbol>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> y </identifier>
                  NAME: y, TYPE: int, KIND: none, INDEX: NA
              </term>
              <symbol> + </symbol>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getLeft </identifier>
      NAME: getLeft, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> x </identifier>
                NAME: x, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> getRight </identifier>
      NAME: getRight, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> x </identifier>
                NAME: x, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> + </symbol>
            <term>
              <integerConstant> 5 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> setDestination </identifier>
      NAME: setDestination, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> destx </identifier>
        NAME: destx, TYPE: int, KIND: argument, ARGINDEX: 0
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier> desty </identifier>
        NAME: desty, TYPE: int, KIND: argument, ARGINDEX: 1
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> dx </identifier>
          NAME: dx, TYPE: int, KIND: var, VARINDEX: 0
        <symbol> , </symbol>
        <identifier> dy </identifier>
          NAME: dy, TYPE: int, KIND: var, VARINDEX: 1
        <symbol> , </symbol>
        <identifier> temp </identifier>
          NAME: temp, TYPE: int, KIND: var, VARINDEX: 2
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> lengthx </identifier>
            NAME: lengthx, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> destx </identifier>
                NAME: destx, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> - </symbol>
            <term>
              <identifier> x </identifier>
                NAME: x, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> lengthy </identifier>
            NAME: lengthy, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> desty </identifier>
                NAME: desty, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> - </symbol>
            <term>
              <identifier> y </identifier>
                NAME: y, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> dx </identifier>
            NAME: dx, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Math </identifier>
                NAME: Math, TYPE: int, KIND: none, INDEX: NA
              <symbol> . </symbol>
              <identifier> abs </identifier>
                NAME: abs, TYPE: int, KIND: none, INDEX: NA
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> lengthx </identifier>
                      NAME: lengthx, TYPE: int, KIND: none, INDEX: NA
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> dy </identifier>
            NAME: dy, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> Math </identifier>
                NAME: Math, TYPE: int, KIND: none, INDEX: NA
              <symbol> . </symbol>
              <identifier> abs </identifier>
                NAME: abs, TYPE: int, KIND: none, INDEX: NA
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier> lengthy </identifier>
                      NAME: lengthy, TYPE: int, KIND: none, INDEX: NA
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> invert </identifier>
            NAME: invert, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> dx </identifier>
                    NAME: dx, TYPE: int, KIND: none, INDEX: NA
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <identifier> dy </identifier>
                    NAME: dy, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> invert </identifier>
                NAME: invert, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> temp </identifier>
                NAME: temp, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> dx </identifier>
                    NAME: dx, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> dx </identifier>
                NAME: dx, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> dy </identifier>
                    NAME: dy, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> dy </identifier>
                NAME: dy, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> temp </identifier>
                    NAME: temp, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivex </identifier>
                NAME: positivex, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                        NAME: y, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier> desty </identifier>
                        NAME: desty, TYPE: int, KIND: none, INDEX: NA
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivey </identifier>
                NAME: positivey, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                        NAME: x, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier> destx </identifier>
                        NAME: destx, TYPE: int, KIND: none, INDEX: NA
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivex </identifier>
                NAME: positivex, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                        NAME: x, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier> destx </identifier>
                        NAME: destx, TYPE: int, KIND: none, INDEX: NA
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> positivey </identifier>
                NAME: positivey, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                        NAME: y, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier> desty </identifier>
                        NAME: desty, TYPE: int, KIND: none, INDEX: NA
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> d </identifier>
            NAME: d, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
                <symbol> * </symbol>
                <term>
                  <identifier> dy </identifier>
                    NAME: dy, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> - </symbol>
            <term>
              <identifier> dx </identifier>
                NAME: dx, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> straightD </identifier>
            NAME: straightD, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
            <symbol> * </symbol>
            <term>
              <identifier> dy </identifier>
                NAME: dy, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> diagonalD </identifier>
            NAME: diagonalD, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
            <symbol> * </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> dy </identifier>
                    NAME: dy, TYPE: int, KIND: none, INDEX: NA
                </term>
                <symbol> - </symbol>
                <term>
                  <identifier> dx </identifier>
                    NAME: dx, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier> move </identifier>
      NAME: move, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier> hide </identifier>
            NAME: hide, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> d </identifier>
                NAME: d, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> d </identifier>
                NAME: d, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> d </identifier>
                    NAME: d, TYPE: int, KIND: none, INDEX: NA
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> straightD </identifier>
                    NAME: straightD, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> d </identifier>
                NAME: d, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> d </identifier>
                    NAME: d, TYPE: int, KIND: none, INDEX: NA
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier> diagonalD </identifier>
                    NAME: diagonalD, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> positivey </identifier>
                    NAME: positivey, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> invert </identifier>
                        NAME: invert, TYPE: int, KIND: none, INDEX: NA
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> x </identifier>
                        NAME: x, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> x </identifier>
                            NAME: x, TYPE: int, KIND: none, INDEX: NA
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> y </identifier>
                        NAME: y, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> y </identifier>
                            NAME: y, TYPE: int, KIND: none, INDEX: NA
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> invert </identifier>
                        NAME: invert, TYPE: int, KIND: none, INDEX: NA
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> x </identifier>
                        NAME: x, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> x </identifier>
                            NAME: x, TYPE: int, KIND: none, INDEX: NA
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> y </identifier>
                        NAME: y, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> y </identifier>
                            NAME: y, TYPE: int, KIND: none, INDEX: NA
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> positivex </identifier>
                NAME: positivex, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> invert </identifier>
                    NAME: invert, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> y </identifier>
                    NAME: y, TYPE: int, KIND: none, INDEX: NA
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                        NAME: y, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> x </identifier>
                    NAME: x, TYPE: int, KIND: none, INDEX: NA
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                        NAME: x, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> invert </identifier>
                    NAME: invert, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> y </identifier>
                    NAME: y, TYPE: int, KIND: none, INDEX: NA
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                        NAME: y, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> x </identifier>
                    NAME: x, TYPE: int, KIND: none, INDEX: NA
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> x </identifier>
                        NAME: x, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                      NAME: x, TYPE: int, KIND: none, INDEX: NA
                  </term>
                  <symbol> &gt; </symbol>
                  <term>
                    <identifier> leftWall </identifier>
                      NAME: leftWall, TYPE: int, KIND: none, INDEX: NA
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> wall </identifier>
                NAME: wall, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> x </identifier>
                NAME: x, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> leftWall </identifier>
                    NAME: leftWall, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> x </identifier>
                      NAME: x, TYPE: int, KIND: none, INDEX: NA
                  </term>
                  <symbol> &lt; </symbol>
                  <term>
                    <identifier> rightWall </identifier>
                      NAME: rightWall, TYPE: int, KIND: none, INDEX: NA
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> wall </identifier>
                NAME: wall, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> x </identifier>
                NAME: x, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> rightWall </identifier>
                    NAME: rightWall, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                      NAME: y, TYPE: int, KIND: none, INDEX: NA
                  </term>
                  <symbol> &gt; </symbol>
                  <term>
                    <identifier> topWall </identifier>
                      NAME: topWall, TYPE: int, KIND: none, INDEX: NA
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> wall </identifier>
                NAME: wall, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 3 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> y </identifier>
                NAME: y, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> topWall </identifier>
                    NAME: topWall, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier> y </identifier>
                      NAME: y, TYPE: int, KIND: none, INDEX: NA
                  </term>
                  <symbol> &lt; </symbol>
                  <term>
                    <identifier> bottomWall </identifier>
                      NAME: bottomWall, TYPE: int, KIND: none, INDEX: NA
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> wall </identifier>
                NAME: wall, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 4 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> y </identifier>
                NAME: y, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> bottomWall </identifier>
                    NAME: bottomWall, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> show </identifier>
            NAME: show, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier> wall </identifier>
                NAME: wall, TYPE: int, KIND: none, INDEX: NA
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier> bounce </identifier>
      NAME: bounce, TYPE: int, KIND: none, INDEX: NA
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier> bouncingDirection </identifier>
        NAME: bouncingDirection, TYPE: int, KIND: argument, ARGINDEX: 0
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier> newx </identifier>
          NAME: newx, TYPE: int, KIND: var, VARINDEX: 0
        <symbol> , </symbol>
        <identifier> newy </identifier>
          NAME: newy, TYPE: int, KIND: var, VARINDEX: 1
        <symbol> , </symbol>
        <identifier> divLengthx </identifier>
          NAME: divLengthx, TYPE: int, KIND: var, VARINDEX: 2
        <symbol> , </symbol>
        <identifier> divLengthy </identifier>
          NAME: divLengthy, TYPE: int, KIND: var, VARINDEX: 3
        <symbol> , </symbol>
        <identifier> factor </identifier>
          NAME: factor, TYPE: int, KIND: var, VARINDEX: 4
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier> divLengthx </identifier>
            NAME: divLengthx, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> lengthx </identifier>
                NAME: lengthx, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> / </symbol>
            <term>
              <integerConstant> 10 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier> divLengthy </identifier>
            NAME: divLengthy, TYPE: int, KIND: none, INDEX: NA
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier> lengthy </identifier>
                NAME: lengthy, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> / </symbol>
            <term>
              <integerConstant> 10 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> bouncingDirection </identifier>
                NAME: bouncingDirection, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> factor </identifier>
                NAME: factor, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 10 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <identifier> lengthx </identifier>
                              NAME: lengthx, TYPE: int, KIND: none, INDEX: NA
                          </term>
                          <symbol> &lt; </symbol>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &amp; </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> bouncingDirection </identifier>
                        NAME: bouncingDirection, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> | </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> lengthx </identifier>
                        NAME: lengthx, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &amp; </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> bouncingDirection </identifier>
                        NAME: bouncingDirection, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> - </symbol>
                          <term>
                            <integerConstant> 1 </integerConstant>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> factor </identifier>
                    NAME: factor, TYPE: int, KIND: none, INDEX: NA
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 20 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> factor </identifier>
                    NAME: factor, TYPE: int, KIND: none, INDEX: NA
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier> wall </identifier>
                NAME: wall, TYPE: int, KIND: none, INDEX: NA
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier> newx </identifier>
                NAME: newx, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 506 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> newy </identifier>
                NAME: newy, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> divLengthy </identifier>
                        NAME: divLengthy, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> - </symbol>
                          <term>
                            <integerConstant> 50 </integerConstant>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> / </symbol>
                <term>
                  <identifier> divLengthx </identifier>
                    NAME: divLengthx, TYPE: int, KIND: none, INDEX: NA
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier> newy </identifier>
                NAME: newy, TYPE: int, KIND: none, INDEX: NA
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier> y </identifier>
                    NAME: y, TYPE: int, KIND: none, INDEX: NA
                </term>
                <symbol> + </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> newy </identifier>
                        NAME: newy, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <identifier> factor </identifier>
                        NAME: factor, TYPE: int, KIND: none, INDEX: NA
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier> wall </identifier>
                    NAME: wall, TYPE: int, KIND: none, INDEX: NA
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> newx </identifier>
                    NAME: newx, TYPE: int, KIND: none, INDEX: NA
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> newy </identifier>
                    NAME: newy, TYPE: int, KIND: none, INDEX: NA
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> divLengthy </identifier>
                            NAME: divLengthy, TYPE: int, KIND: none, INDEX: NA
                        </term>
                        <symbol> * </symbol>
                        <term>
                          <integerConstant> 50 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> / </symbol>
                    <term>
                      <identifier> divLengthx </identifier>
                        NAME: divLengthx, TYPE: int, KIND: none, INDEX: NA
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier> newy </identifier>
                    NAME: newy, TYPE: int, KIND: none, INDEX: NA
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier> y </identifier>
                        NAME: y, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier> newy </identifier>
                            NAME: newy, TYPE: int, KIND: none, INDEX: NA
                        </term>
                        <symbol> * </symbol>
                        <term>
                          <identifier> factor </identifier>
                            NAME: factor, TYPE: int, KIND: none, INDEX: NA
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier> wall </identifier>
                        NAME: wall, TYPE: int, KIND: none, INDEX: NA
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 3 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newy </identifier>
                        NAME: newy, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <integerConstant> 250 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newx </identifier>
                        NAME: newx, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> divLengthx </identifier>
                                NAME: divLengthx, TYPE: int, KIND: none, INDEX: NA
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> - </symbol>
                                  <term>
                                    <integerConstant> 25 </integerConstant>
                                  </term>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> / </symbol>
                        <term>
                          <identifier> divLengthy </identifier>
                            NAME: divLengthy, TYPE: int, KIND: none, INDEX: NA
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newx </identifier>
                        NAME: newx, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> x </identifier>
                            NAME: x, TYPE: int, KIND: none, INDEX: NA
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> newx </identifier>
                                NAME: newx, TYPE: int, KIND: none, INDEX: NA
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <identifier> factor </identifier>
                                NAME: factor, TYPE: int, KIND: none, INDEX: NA
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newy </identifier>
                        NAME: newy, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newx </identifier>
                        NAME: newx, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> divLengthx </identifier>
                                NAME: divLengthx, TYPE: int, KIND: none, INDEX: NA
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <integerConstant> 25 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> / </symbol>
                        <term>
                          <identifier> divLengthy </identifier>
                            NAME: divLengthy, TYPE: int, KIND: none, INDEX: NA
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier> newx </identifier>
                        NAME: newx, TYPE: int, KIND: none, INDEX: NA
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier> x </identifier>
                            NAME: x, TYPE: int, KIND: none, INDEX: NA
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier> newx </identifier>
                                NAME: newx, TYPE: int, KIND: none, INDEX: NA
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <identifier> factor </identifier>
                                NAME: factor, TYPE: int, KIND: none, INDEX: NA
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier> setDestination </identifier>
            NAME: setDestination, TYPE: int, KIND: none, INDEX: NA
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier> newx </identifier>
                  NAME: newx, TYPE: int, KIND: none, INDEX: NA
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier> newy </identifier>
                  NAME: newy, TYPE: int, KIND: none, INDEX: NA
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
