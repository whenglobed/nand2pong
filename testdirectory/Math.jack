// This file is part of the materials accompanying the book 
// "The Elements of Computing Systems" by Nisan and Schocken, 
// MIT Press. Book site: www.idc.ac.il/tecs
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {

    static Array twoToThe; // for bitmasks

    /** Initializes the library. */
    function void init() {
        
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = -16384;        
        
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x)
    {
        if (x < 0)
        {
            return -x;
        }
        else
        {
            return x;
        }
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {    
        var int sum;
        var int bitindex;
        var int shiftedX;
        
        let sum = 0;
        let bitindex = 0;
        let shiftedX = x;
        
        while (bitindex < 16)
        {
            if (Math.bit(y, bitindex))
            {
                let sum = sum + shiftedX;
            }                
            let shiftedX = shiftedX + shiftedX;            
            let bitindex = bitindex + 1;
        }
        
        return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int quotient;
        var int temp;        
        var boolean negativeflag;        
        
        if (y = 0)
        {
            do Sys.error(3);
        }
        
        // if only one of the operands is negative, set a flag
        // so we remember to negate the final value before returning
        if (x < 0)
        {
            if (y < 0)
            {
                let negativeflag = false;
            }
            else
            {
                let negativeflag = true;
            }
        }
        else
        {
            if (y < 0)
            {
                let negativeflag = true;
            }            
        }
        
        let x = Math.abs(x);
        let y = Math.abs(y);        
        
        if ((y > x) | (y < 0))
        {            
            return 0;
        }        
        else
        {            
            if ((y + y) < 0)
            {
                // Doubling y will overflow, so assume y + y would be > x if we
                // had room to store it. divide(x, y + y) would return 0 in that
                // case, so we can simply set quotient to 0 instead of actually
                // calling the function.
                
                let quotient = 0;
            }
            else
            {
                let quotient = Math.divide(x, y + y);
            }
            
            let temp = Math.multiply(y, quotient);
            let temp = temp + temp;
            if ((x - temp) < y)
            {
                let quotient = quotient + quotient;
            }
            else
            {
                let quotient = quotient + quotient + 1;                
            }            
            
            if (negativeflag)
            {
                let quotient = -quotient;
            }
            
            return quotient;            
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x)
    {
        var int y;
        var int i, j;
        var int temp;
        var int tempsquared;
        
        if (x < 0)
        {
            do Sys.error(4);
        }
        
        let y = 0;        
        let j = 7;  // n/2 - 1, where n = number of bits (16)        
        
        while (j > -1)
        {
            let i = 0;
            let temp = 1;
            
            // calculate 2^j            
            while (i < j)
            {
                let temp = Math.multiply(temp, 2);
                let i = i + 1;                
            }            
            
            let temp = temp + y;
            let tempsquared = Math.multiply(temp, temp);            
            
            if ((tempsquared < x) | (tempsquared = x))
            {
                if (tempsquared > 0)
                {
                    let y = temp;
                }
            }              
            
            let j = j - 1;            
        }
        return y;
    }

    /** Returns the greater number.
    *   Returns a if the numbers are equal.
    */
   
    function int max(int a, int b)
    {
        if (b > a)
        {
            return b;
        }
        return a;
    }

    /** Returns the smaller number.
    *   Returns a if the numbers are equal.
    */
    function int min(int a, int b)
    {
        if (b < a)
        {
            return b;
        }
        return a;        
    }
    
    /** Returns true if the j-th bit of the integer x is 1 and
    *   false otherwise.
    */
    function boolean bit(int x, int j)
    {
        if ((x & twoToThe[j]) = 0)
        {
            return false;
        }
        return true;
    }
    
    /** Returns the remainder of x/y. */
    function int remainder(int x, int y)
    {
        var int quotient;
        var int remainder;
        
        let quotient = Math.divide(x, y);
        let remainder = (x - Math.multiply(y, quotient));
        
        return remainder;
    }
}
